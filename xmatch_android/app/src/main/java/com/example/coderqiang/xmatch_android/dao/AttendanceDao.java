package com.example.coderqiang.xmatch_android.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.coderqiang.xmatch_android.model.Attendance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDANCE".
*/
public class AttendanceDao extends AbstractDao<Attendance, Long> {

    public static final String TABLENAME = "ATTENDANCE";

    /**
     * Properties of entity Attendance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AttendanceId = new Property(0, Long.class, "attendanceId", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property DepartmentId = new Property(2, Long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property StartTime = new Property(3, int.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, int.class, "endTime", false, "END_TIME");
        public final static Property Weekend = new Property(5, int.class, "weekend", false, "WEEKEND");
        public final static Property Week = new Property(6, int.class, "week", false, "WEEK");
        public final static Property CreateTime = new Property(7, Long.class, "createTime", false, "CREATE_TIME");
    }


    public AttendanceDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: attendanceId
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"DEPARTMENT_ID\" INTEGER," + // 2: departmentId
                "\"START_TIME\" INTEGER NOT NULL ," + // 3: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 4: endTime
                "\"WEEKEND\" INTEGER NOT NULL ," + // 5: weekend
                "\"WEEK\" INTEGER NOT NULL ," + // 6: week
                "\"CREATE_TIME\" INTEGER);"); // 7: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Attendance entity) {
        stmt.clearBindings();
 
        Long attendanceId = entity.getAttendanceId();
        if (attendanceId != null) {
            stmt.bindLong(1, attendanceId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(3, departmentId);
        }
        stmt.bindLong(4, entity.getStartTime());
        stmt.bindLong(5, entity.getEndTime());
        stmt.bindLong(6, entity.getWeekend());
        stmt.bindLong(7, entity.getWeek());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Attendance entity) {
        stmt.clearBindings();
 
        Long attendanceId = entity.getAttendanceId();
        if (attendanceId != null) {
            stmt.bindLong(1, attendanceId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(3, departmentId);
        }
        stmt.bindLong(4, entity.getStartTime());
        stmt.bindLong(5, entity.getEndTime());
        stmt.bindLong(6, entity.getWeekend());
        stmt.bindLong(7, entity.getWeek());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Attendance readEntity(Cursor cursor, int offset) {
        Attendance entity = new Attendance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // attendanceId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // departmentId
            cursor.getInt(offset + 3), // startTime
            cursor.getInt(offset + 4), // endTime
            cursor.getInt(offset + 5), // weekend
            cursor.getInt(offset + 6), // week
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Attendance entity, int offset) {
        entity.setAttendanceId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDepartmentId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setStartTime(cursor.getInt(offset + 3));
        entity.setEndTime(cursor.getInt(offset + 4));
        entity.setWeekend(cursor.getInt(offset + 5));
        entity.setWeek(cursor.getInt(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Attendance entity, long rowId) {
        entity.setAttendanceId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Attendance entity) {
        if(entity != null) {
            return entity.getAttendanceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Attendance entity) {
        return entity.getAttendanceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
