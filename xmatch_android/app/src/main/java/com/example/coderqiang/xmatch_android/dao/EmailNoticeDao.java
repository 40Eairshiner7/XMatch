package com.example.coderqiang.xmatch_android.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.coderqiang.xmatch_android.model.EmailNotice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMAIL_NOTICE".
*/
public class EmailNoticeDao extends AbstractDao<EmailNotice, Long> {

    public static final String TABLENAME = "EMAIL_NOTICE";

    /**
     * Properties of entity EmailNotice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EmailNoticeId = new Property(0, Long.class, "emailNoticeId", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property CreateTime = new Property(3, long.class, "createTime", false, "CREATE_TIME");
        public final static Property ToEmailUrl = new Property(4, String.class, "toEmailUrl", false, "TO_EMAIL_URL");
    }


    public EmailNoticeDao(DaoConfig config) {
        super(config);
    }
    
    public EmailNoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMAIL_NOTICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: emailNoticeId
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 3: createTime
                "\"TO_EMAIL_URL\" TEXT);"); // 4: toEmailUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMAIL_NOTICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmailNotice entity) {
        stmt.clearBindings();
 
        Long emailNoticeId = entity.getEmailNoticeId();
        if (emailNoticeId != null) {
            stmt.bindLong(1, emailNoticeId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getCreateTime());
 
        String toEmailUrl = entity.getToEmailUrl();
        if (toEmailUrl != null) {
            stmt.bindString(5, toEmailUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmailNotice entity) {
        stmt.clearBindings();
 
        Long emailNoticeId = entity.getEmailNoticeId();
        if (emailNoticeId != null) {
            stmt.bindLong(1, emailNoticeId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getCreateTime());
 
        String toEmailUrl = entity.getToEmailUrl();
        if (toEmailUrl != null) {
            stmt.bindString(5, toEmailUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EmailNotice readEntity(Cursor cursor, int offset) {
        EmailNotice entity = new EmailNotice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // emailNoticeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getLong(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // toEmailUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmailNotice entity, int offset) {
        entity.setEmailNoticeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.getLong(offset + 3));
        entity.setToEmailUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmailNotice entity, long rowId) {
        entity.setEmailNoticeId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmailNotice entity) {
        if(entity != null) {
            return entity.getEmailNoticeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmailNotice entity) {
        return entity.getEmailNoticeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
