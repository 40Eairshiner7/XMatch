package com.example.coderqiang.xmatch_android.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.coderqiang.xmatch_android.model.ChildDepartment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_DEPARTMENT".
*/
public class ChildDepartmentDao extends AbstractDao<ChildDepartment, Long> {

    public static final String TABLENAME = "CHILD_DEPARTMENT";

    /**
     * Properties of entity ChildDepartment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChildDepartmentId = new Property(0, Long.class, "childDepartmentId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property DepartmentId = new Property(4, long.class, "departmentId", false, "DEPARTMENT_ID");
    }


    public ChildDepartmentDao(DaoConfig config) {
        super(config);
    }
    
    public ChildDepartmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_DEPARTMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: childDepartmentId
                "\"NAME\" TEXT," + // 1: name
                "\"PHONE\" TEXT," + // 2: phone
                "\"EMAIL\" TEXT," + // 3: email
                "\"DEPARTMENT_ID\" INTEGER NOT NULL );"); // 4: departmentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_DEPARTMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildDepartment entity) {
        stmt.clearBindings();
 
        Long childDepartmentId = entity.getChildDepartmentId();
        if (childDepartmentId != null) {
            stmt.bindLong(1, childDepartmentId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
        stmt.bindLong(5, entity.getDepartmentId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildDepartment entity) {
        stmt.clearBindings();
 
        Long childDepartmentId = entity.getChildDepartmentId();
        if (childDepartmentId != null) {
            stmt.bindLong(1, childDepartmentId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
        stmt.bindLong(5, entity.getDepartmentId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChildDepartment readEntity(Cursor cursor, int offset) {
        ChildDepartment entity = new ChildDepartment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // childDepartmentId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.getLong(offset + 4) // departmentId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildDepartment entity, int offset) {
        entity.setChildDepartmentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartmentId(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChildDepartment entity, long rowId) {
        entity.setChildDepartmentId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChildDepartment entity) {
        if(entity != null) {
            return entity.getChildDepartmentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChildDepartment entity) {
        return entity.getChildDepartmentId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
