package com.example.coderqiang.xmatch_android.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.coderqiang.xmatch_android.model.DepManager;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEP_MANAGER".
*/
public class DepManagerDao extends AbstractDao<DepManager, Long> {

    public static final String TABLENAME = "DEP_MANAGER";

    /**
     * Properties of entity DepManager.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DepManagerId = new Property(0, Long.class, "depManagerId", true, "_id");
        public final static Property DepManagerAccount = new Property(1, String.class, "depManagerAccount", false, "DEP_MANAGER_ACCOUNT");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property PhoneNum = new Property(3, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property ManagerName = new Property(5, String.class, "managerName", false, "MANAGER_NAME");
        public final static Property ManagerSummary = new Property(6, String.class, "managerSummary", false, "MANAGER_SUMMARY");
        public final static Property DepartmentId = new Property(7, long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property Role = new Property(8, int.class, "role", false, "ROLE");
    }


    public DepManagerDao(DaoConfig config) {
        super(config);
    }
    
    public DepManagerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEP_MANAGER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: depManagerId
                "\"DEP_MANAGER_ACCOUNT\" TEXT," + // 1: depManagerAccount
                "\"PASSWORD\" TEXT," + // 2: password
                "\"PHONE_NUM\" TEXT," + // 3: phoneNum
                "\"EMAIL\" TEXT," + // 4: email
                "\"MANAGER_NAME\" TEXT," + // 5: managerName
                "\"MANAGER_SUMMARY\" TEXT," + // 6: managerSummary
                "\"DEPARTMENT_ID\" INTEGER NOT NULL ," + // 7: departmentId
                "\"ROLE\" INTEGER NOT NULL );"); // 8: role
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEP_MANAGER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DepManager entity) {
        stmt.clearBindings();
 
        Long depManagerId = entity.getDepManagerId();
        if (depManagerId != null) {
            stmt.bindLong(1, depManagerId);
        }
 
        String depManagerAccount = entity.getDepManagerAccount();
        if (depManagerAccount != null) {
            stmt.bindString(2, depManagerAccount);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(4, phoneNum);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String managerName = entity.getManagerName();
        if (managerName != null) {
            stmt.bindString(6, managerName);
        }
 
        String managerSummary = entity.getManagerSummary();
        if (managerSummary != null) {
            stmt.bindString(7, managerSummary);
        }
        stmt.bindLong(8, entity.getDepartmentId());
        stmt.bindLong(9, entity.getRole());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DepManager entity) {
        stmt.clearBindings();
 
        Long depManagerId = entity.getDepManagerId();
        if (depManagerId != null) {
            stmt.bindLong(1, depManagerId);
        }
 
        String depManagerAccount = entity.getDepManagerAccount();
        if (depManagerAccount != null) {
            stmt.bindString(2, depManagerAccount);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(4, phoneNum);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String managerName = entity.getManagerName();
        if (managerName != null) {
            stmt.bindString(6, managerName);
        }
 
        String managerSummary = entity.getManagerSummary();
        if (managerSummary != null) {
            stmt.bindString(7, managerSummary);
        }
        stmt.bindLong(8, entity.getDepartmentId());
        stmt.bindLong(9, entity.getRole());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DepManager readEntity(Cursor cursor, int offset) {
        DepManager entity = new DepManager( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // depManagerId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // depManagerAccount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phoneNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // managerName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // managerSummary
            cursor.getLong(offset + 7), // departmentId
            cursor.getInt(offset + 8) // role
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DepManager entity, int offset) {
        entity.setDepManagerId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDepManagerAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoneNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setManagerName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setManagerSummary(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDepartmentId(cursor.getLong(offset + 7));
        entity.setRole(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DepManager entity, long rowId) {
        entity.setDepManagerId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DepManager entity) {
        if(entity != null) {
            return entity.getDepManagerId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DepManager entity) {
        return entity.getDepManagerId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
